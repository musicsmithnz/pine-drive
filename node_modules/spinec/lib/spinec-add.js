'use strict'

const fs = require('fs')
const path = require('path')	
const s = require("underscore.string")
const program = require("commander")
const fileFunctions = require(path.join(__dirname,"/fileFunctions.js"))
var https = require('https');
var main_html_file="./index.html"
var yaml = require("js-yaml")

/*Resources*/
try {
    var components_list = yaml.safeLoad(fs.readFileSync(path.join(__dirname,'./polymer_web_components.yaml'), 'utf8'));
    //      console.log(components_list);
} catch (e) {
      console.log(e);
}
    /*
var components_list=fileFunctions.readJsonFile(path.join(__dirname,'/polymer_web_components.json'))
var polymer_web_components_version=
*/

    /*
var polymer_web_components_cdn_url="https://unpkg.com/polymer_web_components@"+polymer_web_components_version+"/components"
var ipfs_components_folder_hash="QmZQfRK1wxwMpjp1TSgM7aqWANe2gTRzn9XtE1mwz4xEdZ"
var ipfs_cdn_url="https://ipfs.io/ipfs/"+ipfs_components_folder_hash
var git_cdn_url="https://cdn.rawgit.com/musicsmithnz/polymer_web_components/master/components"
*/
var index_template_url="https://ipfs.io/ipfs/QmQCZXFdoFG6PXbxmKmsjRBnWLzGRYgrW2oq5roq58ZyfK/index.html"

program
    .option('-l, --local','serve from local repository')
    .option('-i, --ipfs','serve from ipfs repository')
    .option('-u, --unpkg','serve from unpkg repository')
    .option('-g, --github','serve from github repository')
    .option('-v, --vendor','serve from vendor repository')
    .option('-a, --app','download an app')
	.parse(process.argv)

var component_name= program.args;

function writeFile(file_name, file_body){
    console.log(file_name)
    console.log(file_body)
	fs.writeFile(file_name, file_body,"utf-8", function(err) {
	    if(err) {
    	    return console.log(err)
	    }
        console.log("writeFile function nearly complete...")
        return
        console.log("writeFile function not returned")
	}) 
}
function insertString( inputString, insertString, atString){
	console.log("atString: " + atString)
	var modifiedString = inputString.toString().replace(new RegExp(atString,'g'),insertString + "\n\t\t\t" + atString)
	return modifiedString
}
function insertModuleReference(new_component_source, main_html_file){
	var script_tag = "<script type=\"module\" src=\""+new_component_source+"\"></script>"
	var main_html_body = fs.readFile(main_html_file, function(err, data){
        var main_html_body_modified = insertString( data, script_tag, '<!--/MODULES-->')
    	writeFile(main_html_file, main_html_body_modified)
        console.log("modified")
	})
}

function downloadFile(url, path, cb){
	var file = fs.createWriteStream(path);
	var request = https.get(url, function(response) {
    	response.pipe(file)
	    if (typeof cb === 'function') {
	        cb()
	    }
	})
}

function addElement(component_name){
    console.log("searching for new component...")
    var component_filename=component_name+".js"
    var component_url=""
	for ( var i=0; i< components_list.length; i++){
        console.log(components_list[i].name)
	    if (components_list[i].name === component_filename) {
        	console.log("found component: ",components_list[i].name)
        	console.log("ipfs   : ",components_list[i].ipfs)
        	console.log("github : ",components_list[i].github)
        	console.log("unpkg  : ",components_list[i].unpkg)
            if(program.ipfs){    
                console.log("inserting ipfs reference")
                component_url=components[i].ipfs
            } else if(program.unpkg){    
                console.log("inserting unpkg reference")
                component_url=components[i].unpkg
            } else if(program.github){
                console.log("inserting github reference")
                component_url=components[i].github
            } else {
                console.log("inserting local reference")
                component_url="./src/polymer_web_components/components/"+component_filename
                downloadFile(components_list[i].ipfs, component_url)
            } 
        	fs.stat(main_html_file,function(err, stats){
            	if(err == null){
                    console.log("index found, inserting reference now")
                	insertModuleReference(component_url, main_html_file)
                    console.log("should have inserted")
           	    } else {
            	    console.log("index not found, downloading index now")
                	downloadFile(index_template_url,main_html_file, function() {
                    	console.log("index downloaded")
	                    console.log("component file: "+component_filename)
            	        console.log("main_html_file: "+main_html_file)
                	    insertModuleReference(component_url, main_html_file)
            	    })
                }
	        })
	        break
	    }
	}
}
addElement(component_name)
    /*
    */
